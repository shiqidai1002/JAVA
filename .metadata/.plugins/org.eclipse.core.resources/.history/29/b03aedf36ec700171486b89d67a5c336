/**
 * 
 */
package edu.neu.csye6200.ui;

import java.util.ArrayList;

/**
 * @author Shiqi
 *
 */
public class BGGeneration {
	private int forkNum;
	private double angle;
	private double initialStemLength;
	ArrayList<BGStem> tree = new ArrayList<BGStem>();
	Node first;
	private int iteration;
	private int generationNum;
	private int iterativeCounter = 0;
	
	public BGGeneration(int forkNum, double initialStemLength, int iteration, double angle) {
		this.forkNum = forkNum;
		this.initialStemLength = initialStemLength;
		this.iteration = iteration;
		this.generationNum = calculateGenerationNum(iteration);
		this.angle = angle;
		generate();
	}
	
	public int calculateGenerationNum(int iteration){
		int temp = 0;
		for(int i = 0; i < iteration; i++){
			temp = (int) (temp + Math.pow(forkNum, i + 1));
		}
		return temp;
	}

	class Node{
		 Node nextCenter;
		 Node nextLeft;
		 Node nextRight;
		 BGStem stem;
		
		public Node(Node nextCenter, Node nextLeft, Node nextRight, BGStem stem) {
			this.nextCenter = nextCenter;
			this.nextLeft = nextLeft;
			this.nextRight = nextRight;
			this.stem = stem;
			generate(this);
		}
	}
	
	public void generate(){
		BGStem firstStem = new BGStem(this.initialStemLength, 0.0, 0.0, this.initialStemLength, this.initialStemLength, this.angle);
//		System.out.println("We have the first one: " + firstStem.toString()
//		+ "\nlength: " + firstStem.length
//		+ "\nxstart: " + firstStem.xstart
//		+ "\nystart: " + firstStem.ystart
//		+ "\nxend: " + firstStem.xend
//		+ "\nyend: " + firstStem.yend
//		+ "\nangle: " + firstStem.angle);
		tree.add(firstStem);
		first = new Node(null, null, null, firstStem);
		
	}
	public void generate(Node father){	
		if(iterativeCounter == generationNum){
			System.out.println("enough! " + iterativeCounter);
			return;
			}
		BGStem center = new BGStem(BGRule.calculateCenter(father.stem.length, father.stem.xstart, father.stem.ystart, father.stem.xend, father.stem.yend));
		tree.add(center);
		BGStem left = new BGStem(BGRule.calculateLeft(father.stem.length, father.stem.xstart, father.stem.ystart, father.stem.xend, father.stem.yend, father.stem.angle));
		tree.add(left);
		BGStem right = new BGStem(BGRule.calculateRight(father.stem.length, father.stem.xstart, father.stem.ystart, father.stem.xend, father.stem.yend, father.stem.angle));
		tree.add(right);
		while(iterativeCounter <= iteration){iterativeCounter++;
		father.nextCenter = new Node(null, null, null, center);
		
		}
		while(iterativeCounter <= 2 * iteration){iterativeCounter++;
		father.nextLeft = new Node(null, null, null, left);
		
		}
		while(iterativeCounter <= 3 * iteration){iterativeCounter++;
		father.nextRight = new Node(null, null, null, right);
		
	}
		//System.out.println("counter: " + iterativeCounter);
		
	}

}

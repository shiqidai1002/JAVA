/**
 * 
 */
package edu.neu.csye6200.ui;

import java.util.ArrayList;

/**
 * @author Shiqi
 *
 */
public class BGGeneration {
	private int forkNum;
	private double angle;
	private double initialStemLength;
	ArrayList<BGStem> tree = new ArrayList<BGStem>();
	//Node first;
	private int iteration;
	private int generationNum;
	private int counter = 0;

	public BGGeneration(int forkNum, double initialStemLength, int iteration, double angle) {
		this.forkNum = forkNum;
		this.initialStemLength = initialStemLength;
		this.iteration = iteration;
		this.generationNum = calculateGenerationNum(iteration);
		this.angle = angle;
		generate();
	}

	public int calculateGenerationNum(int iteration) {
		int temp = 0;
		for (int i = 0; i < iteration; i++) {
			temp = (int) (temp + Math.pow(forkNum, i + 1));
		}
		return temp;
	}

//	class Node {
//		Node nextCenter;
//		Node nextLeft;
//		Node nextRight;
//		BGStem stem;
//
//		public Node(Node nextCenter, Node nextLeft, Node nextRight, BGStem stem) {
//			this.nextCenter = nextCenter;
//			this.nextLeft = nextLeft;
//			this.nextRight = nextRight;
//			this.stem = stem;
//		}
//	}

	public void generate() {
		System.out.println("GenerationNum: " + generationNum);
		BGStem firstStem = new BGStem(this.initialStemLength, 0.0, 0.0, 0.0, this.initialStemLength, this.angle);
		// System.out.println("We have the first one: " + firstStem.toString()
		// + "\nlength: " + firstStem.length
		// + "\nxstart: " + firstStem.xstart
		// + "\nystart: " + firstStem.ystart
		// + "\nxend: " + firstStem.xend
		// + "\nyend: " + firstStem.yend
		// + "\nangle: " + firstStem.angle);
		tree.add(firstStem);
//		first = new Node(null, null, null, firstStem);
		generate(firstStem);

	}

	public void generate(BGStem stem) {
		ArrayList<BGStem> currentGeneration = new ArrayList<BGStem>();
		BGStem center = new BGStem();
		center.calculate(stem.length, stem.xstart, stem.ystart, stem.xend, stem.yend,
				90);
		System.out.println("I draw a center stem" + counter);
		tree.add(center);
		currentGeneration.add(center);

		BGStem left = new BGStem();
		left.calculate(stem.length, stem.xstart, stem.ystart, stem.xend, stem.yend,
				0);
		System.out.println("I draw a left stem" + counter);
		tree.add(left);
		currentGeneration.add(left);

		BGStem right = new BGStem();
		right.calculate(stem.length, stem.xstart, stem.ystart, stem.xend, stem.yend,
				180);
		System.out.println("I draw a right stem" + counter);
		tree.add(right);
		currentGeneration.add(right);
		counter +=3;
	}

}
